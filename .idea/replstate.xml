<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1470883199790">{:repl-history {:ide [], :local [&quot;(for [animal [:mouse :duck :lory]] (str (name animal)))&quot; &quot;\n(for [animal [:mouse :duck :lory]\n      color [:red :blue]]\n  (str (name color) \&quot;+\&quot; (name animal)))\n&quot; &quot;(for [animal [:mouse :duck :lory]\n      color [:red :blue]\n      :let [animal-str (str \&quot;animal-\&quot; (name animal))\n            color-str (str \&quot;color-\&quot; (name color))\n            display-str (str animal-str \&quot;-\&quot; color-str)]]\n  display-str)&quot; &quot;(for [animal [:mouse :duck :lory]\n      color [:red :blue]\n      :let [animal-str (str \&quot;animal-\&quot; (name animal))\n            color-str (str \&quot;color-\&quot; (name color))\n            display-str (str animal-str \&quot;-\&quot; color-str)]\n      :when (= color :blue)]\n  display-str)&quot; &quot;(flatten [[:duck [:mouse] [[:lory]]]])&quot; &quot;(vec '(1 2 3))&quot; &quot;(into [] '(1 2 3))&quot; &quot;(sorted-map :b 2 :a 1 :z 3)&quot; &quot;(into (sorted-map) {:b 2 :c 3 :a 1})&quot; &quot;(into {} [[:a 1] [:b 1] [:c 3]])&quot; &quot;(into [] {:a 1 :b 2 :c 3})&quot; &quot;(partitition 3 (range 10))&quot; &quot;(partitition 3 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition 3 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition-all 3 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition-by #(= 6 %) [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition 6 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition false [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition 0 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(partition 1 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(= 6 1)&quot; &quot;who-atom&quot; &quot;(reset! who-atom :chrysalis)&quot; &quot;(def who-atom (atom :caterpillar))&quot; &quot;(defn change [state]\n  (case state\n    :caterpillar :chrysalis\n    :chrysalis :butterfly\n    :butterfly))&quot; &quot;@who-atom&quot; &quot;(swap! who-atom change)&quot; &quot;(dotimes [_ 5] (swap! counter inc))&quot; &quot;(let [n 5]\n  (future (dotimes [_ n] (swap! counter inc)))\n  (future (dotimes [_ n] (swap! counter inc)))\n  (future (dotimes [_ n] (swap! counter inc))))\n\n&quot; &quot;(defn inc-print [val]\n  (println val)\n  (inc val))\n\n(swap! counter inc-print)&quot; &quot;(def counter (atom 0))&quot; &quot;(let [n 5]\n  (future (dotimes [_ n] (swap! counter inc-print)))\n  (future (dotimes [_ n] (swap! counter inc-print)))\n  (future (dotimes [_ n] (swap! counter inc-print))))&quot; &quot;@counter&quot; &quot;(def alice-height (ref 3))\n(def right-hand-bites (ref 10))\n\n(defn eat-from-right-hand []\n  (when (pos? @right-hand-bites)\n    (alter right-hand-bites dec)\n    (alter alice-height #(+ % 24))))\n\n&quot; &quot;(eat-from-right-hand)&quot; &quot;(dosync (eat-from-right-hand))&quot; &quot;(def alice-height (ref 3))\n(def right-hand-bites (ref 10))\n\n(defn eat-from-right-hand []\n  (dosync (when (pos? @right-hand-bites)\n            (alter right-hand-bites dec)\n            (alter alice-height #(+ % 24)))))\n\n(let [n 3]\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand))))\n\n@alice-height\n@right-hand-bites&quot; &quot;(def alice-height (ref 3))\n(def right-hand-bites (ref 10))\n\n(defn eat-from-right-hand []\n  (dosync (when (pos? @right-hand-bites)\n            (alter right-hand-bites dec)\n            (alter alice-height #(+ % 24)))))\n\n(let [n 5]\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand))))\n\n@alice-height\n@right-hand-bites\n&quot; &quot;(def alice-height (ref 3))\n(def right-hand-bites (ref 10))\n\n(defn eat-from-right-hand []\n  (dosync (when (pos? @right-hand-bites)\n            (alter right-hand-bites dec)\n            (alter alice-height #(+ % 24)))))\n\n(let [n 15]\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand))))\n\n@alice-height\n@right-hand-bites\n&quot; &quot;(def alice-height (ref 3))\n(def right-hand-bites (ref 10))\n&quot; &quot;@alice-height&quot; &quot;@right-hand-bites&quot; &quot;(def alice-height (ref 3))\n(def right-hand-bites (ref 10))\n\n(defn eat-from-right-hand []\n  (dosync (when (pos? @right-hand-bites)\n            (commute right-hand-bites dec)\n            (commute alice-height #(+ % 24)))))\n\n(let [n 2]\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (futrue (dotimes [_ n] (eat-from-right-hand))))\n\n@alice-height\n@right-hand-bites\n&quot; &quot;(def alice-height (ref 3))\n(def right-hand-bites (ref 10))\n\n(defn eat-from-right-hand []\n  (dosync (when (pos? @right-hand-bites)\n            (commute right-hand-bites dec)\n            (commute alice-height #(+ % 24)))))\n\n(let [n 2]\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand)))\n  (future (dotimes [_ n] (eat-from-right-hand))))\n\n@alice-height\n@right-hand-bites&quot; &quot;(def x (ref 1))\n(def y (ref 1))\n\n(defn new-values []\n  (dosync\n    (alter x inc)\n    (ref-set y (+ 2 @x))))\n\n(let [n 2]\n  (future (dotimes [_ n] (new-values)))\n  (future (dotimes [_ n] (new-values))))\n\n@x\n@y&quot; &quot;(dotimes [_ 10]\n  (def x (ref 1))\n  (def y (ref 1))\n\n  (defn new-values []\n    (dosync\n      (alter x inc)\n      (ref-set y (+ 2 @x))))\n\n  (let [n 2]\n    (future (dotimes [_ n] (new-values)))\n    (future (dotimes [_ n] (new-values))))\n\n  @x\n  @y\n  )&quot; &quot;\n\n(dotimes [_ 10]\n  (def x (ref 1))\n  (def y (ref 1))\n\n  (defn new-values []\n    (dosync\n      (alter x inc)\n      (ref-set y (+ 2 @x))))\n\n  (let [n 2]\n    (future (dotimes [_ n] (new-values)))\n    (future (dotimes [_ n] (new-values))))\n\n  (println @x)\n  (println @y)\n  )\n&quot; &quot;(def who-agent (agent :caterpillar))&quot; &quot;who-agent&quot; &quot;(def who-agent (agent :caterpillar))\n\n(defn change [state]\n  (case state\n    :caterpillar :chrysalis\n    :chrysalis :butterfly\n    :butterfly))\n\n(send who-agent change)\n\n@who-agent\n&quot; &quot;(send who-agnet change-error)&quot; &quot;(send who-agent change)&quot; &quot;(def who-agent (agent :caterpillar))\n\n(defn change [state]\n  (case state\n    :caterpillar :chrysalis\n    :chrysalis :butterfly\n    :butterfly))\n\n(defn change-error [state]\n  (throw (Exception, \&quot;Boom!\&quot;)))\n\n(send who-agent change-error)\n\n@who-agent\n\n(send-off who-agent change)&quot; &quot;(send-off who-agent change)&quot; &quot;(def who-agent (agent :caterpillar))\n\n(defn change [state]\n  (case state\n    :caterpillar :chrysalis\n    :chrysalis :butterfly\n    :butterfly))\n\n(defn change-error [state]\n  (throw (Exception, \&quot;Boom!\&quot;)))\n\n(send who-agent change-error)\n\n@who-agent&quot; &quot;(agent-errors who-agent)&quot; &quot;(restart-agent who-agent :caterpillar)&quot; &quot;(send who-agent change)\n@who-agent\n&quot; &quot;(set-error-mode! who-agent :continue)\n(defn err-handler-fn [a ex]\n  (println \&quot;error \&quot; ex \&quot; value is \&quot; @a))\n(set-error-handler! who-agent err-handler-fn)\n\n\n(def who-agent (agent :caterpillar))\n\n\n(send who-agent change-error)&quot; &quot;@who-agent&quot; &quot;(class \&quot;caterpillar\&quot;)&quot; &quot;(. \&quot;caterpillar\&quot; toUpperCase)&quot; &quot;(.toUpperCase \&quot;caterpillar\&quot;)&quot; &quot;(.indexOf \&quot;caterpillar\&quot; \&quot;pillar\&quot;)&quot; &quot;(new String \&quot;Hi!!\&quot;)&quot; &quot;(String. \&quot;Hi!!\&quot;)&quot; &quot;(ns caterpillar.network\n  (:import (java.net InetAddress)))&quot; &quot;(InetAddress/getByName \&quot;localhost\&quot;)&quot; &quot;(.getHostName (InetAddress/getByName \&quot;localhost\&quot;))&quot; &quot;(java.net.InetAddress/getByName \&quot;localhost\&quot;)&quot; &quot;\n(def sb (doto (StringBuffer. \&quot;Who \&quot;)\n          (.append \&quot;are \&quot;)\n          (.append \&quot;you?\&quot;)))\n\n(.toString sb)\n\n&quot; &quot;\n(import 'java.util.UUID)\n(UUID/randomUUID)\n&quot; &quot;(defmulti who-are-you class)\n(defmethod who-are-you java.lang.String [input]\n  (str \&quot;String - who are you? \&quot; input))\n(defmethod who-are-you clojure.lang.Keyword [input]\n  (str \&quot;Keyword - who are you? \&quot; input))\n(defmethod who-are-you java.lang.Long [input]\n  (str \&quot;Number - who are you? \&quot; input))&quot; &quot;(defmethod who-are-you :default [input]\n  (str \&quot;I don't know - who are you? \&quot; input))&quot; &quot;\n(who-are-you :alice)\n(who-are-you \&quot;Alice\&quot;)\n(who-are-you 123)\n(who-are-you true)&quot; &quot;(defmulti eat-mushroom (fn [height]\n                         if (&lt; height 3)\n                         :grow\n                         :shrink))\n&quot; &quot;(defmulti eat-mushroom (fn [height]\n                         (if (&lt; height 3)\n                           :grow\n                           :shrink)))&quot; &quot;(defmethod eat-mushroom :grow [_]\n  \&quot;Eat the right side to grow.\&quot;)\n(defmethod eat-mushroom :shrink [_]\n  \&quot;Eat the left side to shrink.\&quot;)\n&quot; &quot;(eat-mushroom 1)\n(eat-mushroom 9)&quot; &quot;(defprotocol BigMushroom\n  (eat-mushroom [this]))\n\n\n(extend-protocol BigMushroom\n  java.lang.String\n  (eat-mushroom [this]\n    (str (.toUpperCase this) \&quot; mmm tasty!\&quot;)))\n&quot; &quot;(eat-mushroom \&quot;Big Mushroom\&quot;)&quot; &quot;(extend-protocol BigMushroom\n  java.lang.String\n  (eat-mushroom [this]\n    (str (.toUpperCase this) \&quot; mmm tasty!\&quot;))\n  clojure.lang.Keyword\n  (eat-mushroom [this]\n    (case this\n      :grow \&quot;Eat the right side!\&quot;\n      :shrink \&quot;Eat the left side!\&quot;))\n  java.lang.Long\n  (eat-mushroom [this]\n    if (&lt; this 3)\n    \&quot;Eat the right side to grow\&quot;\n    \&quot;Eat the left side to shrink\&quot;))&quot; &quot;(extend-protocol BigMushroom\n  java.lang.String\n  (eat-mushroom [this]\n    (str (.toUpperCase this) \&quot; mmm tasty!\&quot;))\n  clojure.lang.Keyword\n  (eat-mushroom [this]\n    (case this\n      :grow \&quot;Eat the right side!\&quot;\n      :shrink \&quot;Eat the left side!\&quot;))\n  java.lang.Long\n  (eat-mushroom [this]\n    (if (&lt; this 3)\n      \&quot;Eat the right side to grow\&quot;\n      \&quot;Eat the left side to shrink\&quot;)))\n&quot; &quot;(defprotocol BigMushroom\n  (eat-mushroom [this]))\n(extend-protocol BigMushroom\n  java.lang.String\n  (eat-mushroom [this]\n    (str (.toUpperCase this) \&quot; mmm tasty!\&quot;))\n  clojure.lang.Keyword\n  (eat-mushroom [this]\n    (case this\n      :grow \&quot;Eat the right side!\&quot;\n      :shrink \&quot;Eat the left side!\&quot;))\n  java.lang.Long\n  (eat-mushroom [this]\n    (if (&lt; this 3)\n      \&quot;Eat the right side to grow\&quot;\n      \&quot;Eat the left side to shrink\&quot;)))\n(eat-mushroom \&quot;Big Mushroom\&quot;)\n(eat-mushroom :grow)\n(eat-mushroom 1)&quot; &quot;(defrecord Mushroom [color height])&quot; &quot;(def regular-mushroom (Mushroom. \&quot;white and blue polka dots\&quot; \&quot;2 inches\&quot;))&quot; &quot;(class regular-mushroom)&quot; &quot;(.-color regular-mushroom)\n(.-height regular-mushroom)&quot; &quot;(defprotocol Edible\n  (bite-right-side [this])\n  (bite-left-side [this]))\n\n(defrecord Wonderlandmushroom [color height]\n  Edible\n  (bite-right-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes you grow bigger\&quot;))\n  (bite-left-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes you grow smaller\&quot;)))\n\n&quot; &quot;(Wonderlandmushroom [\&quot;test\&quot; \&quot;3\&quot;])&quot; &quot;(Wonderlandmushroom [\&quot;test\&quot; 3])&quot; &quot;(defprotocol Edible\n  (bite-right-side [this])\n  (bite-left-side [this]))\n\n(defrecord Wonderlandmushroom [color height]\n  Edible\n  (bite-right-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes you grow bigger\&quot;))\n  (bite-left-side [this]\n    (str \&quot;The \&quot; color \&quot; bite makes you grow smaller\&quot;)))\n\n\n(defrecord RegularMushroom [color height]\n  Edible\n  (bite-right-side [this]\n    (str \&quot;The \&quot; color \&quot; bite tastes bad\&quot;))\n  (bite-left-side [this]\n    (str \&quot;The \&quot; color \&quot; bite tastes bad too\&quot;)))\n\n(def alice-mushroom (Wonderlandmushroom. \&quot;blue dots\&quot; \&quot;3 inches\&quot;))&quot; &quot;(def reg-mushroom (RegularMushroom. \&quot;brown\&quot; \&quot;1 inches\&quot;))&quot; &quot;(bite-right-side alice-mushroom)\n(bite-left-side alice-mushroom)\n\n(bite-right-side reg-mushroom)\n(bite-left-side reg-mushroom)\n\n&quot; &quot;(defprotocol Edible\n  (bite-right-side [this])\n  (bite-left-side [this]))\n\n(deftype WonderlandMushroom []\n  Edible\n  (bite-right-side [this]\n    (str \&quot;The bite makes you grow bigger\&quot;))\n  (bite-left-side [this]\n    (str \&quot;The bite makes you grow smaller\&quot;)))\n\n(deftype RegularMushroom []\n  Edible\n  (bite-right-side [this]\n    (str \&quot;The bite tastes bad\&quot;))\n  (bite-left-side [this]\n    (str \&quot;The bite tastes bad too\&quot;)))\n\n&quot; &quot;(def alice-mushroom (WonderlandMushroom.))\n(def reg-mushroom (RegularMushroom.))\n&quot; &quot;(bite-right-side alice-mushroom)\n(bite-right-side reg-mushroom)&quot; &quot;(bite-right-side {:type \&quot;wonderland\&quot;})\n(bite-left-side {:type \&quot;wonderland\&quot;})\n\n(bite-right-side {:type \&quot;regular\&quot;})\n(bite-left-side {:type \&quot;regular\&quot;})\n\n&quot; &quot;(defn bite-right-side [mushroom]\n  (if (= (:type mushroom) \&quot;wonderland\&quot;)\n    \&quot;The bite makes you grow bigger\&quot;\n    \&quot;The bite tastes bad\&quot;))\n(defn bite-right-side [mushroom]\n  (if (= (:type mushroom) \&quot;wonderland\&quot;)\n    \&quot;The bite makes you grow smaller\&quot;\n    \&quot;The bite tastes bad too\&quot;))\n\n(bite-right-side {:type \&quot;wonderland\&quot;})\n(bite-left-side {:type \&quot;wonderland\&quot;})\n\n(bite-right-side {:type \&quot;regular\&quot;})\n(bite-left-side {:type \&quot;regular\&quot;})\n\n\n\n&quot; &quot;(bite-right-side {:type \&quot;wonderland\&quot;})&quot; &quot;\n(defn bite-right-side [mushroom]\n  (if (= (:type mushroom) \&quot;wonderland\&quot;)\n    \&quot;The bite makes you grow bigger\&quot;\n    \&quot;The bite tastes bad\&quot;))\n(defn bite-left-side [mushroom]\n  (if (= (:type mushroom) \&quot;wonderland\&quot;)\n    \&quot;The bite makes you grow smaller\&quot;\n    \&quot;The bite tastes bad too\&quot;))\n\n(bite-right-side {:type \&quot;wonderland\&quot;})\n(bite-left-side {:type \&quot;wonderland\&quot;})\n\n(bite-right-side {:type \&quot;regular\&quot;})\n(bite-left-side {:type \&quot;regular\&quot;})&quot;], :remote []}}</component>
</project>